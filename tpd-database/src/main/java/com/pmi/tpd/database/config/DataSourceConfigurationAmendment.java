package com.pmi.tpd.database.config;

import java.io.IOException;
import java.io.Writer;
import java.util.Optional;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.joda.time.format.ISODateTimeFormat;

import com.pmi.tpd.api.context.IClock;
import com.pmi.tpd.api.user.IUser;
import com.pmi.tpd.api.util.Assert;
import com.pmi.tpd.database.DatabaseConstants;
import com.pmi.tpd.database.IDataSourceConfiguration;

/**
 * An amendment for Data Source configuration properties.
 *
 * @author Christophe Friederich
 * @since 1.3
 */
public class DataSourceConfigurationAmendment extends RemovePropertiesAmendment {

    /**
     * The data source configuration that supplies the JDBC property values.
     */
    @Nonnull
    private final IDataSourceConfiguration dataSourceConfig;

    /**
     * An optional message to be included in the injected comment block.
     */
    private final Optional<String> message;

    /**
     * An optional user to show up as the author of the amendments.
     */
    private final IUser user;

    /** */
    private boolean isOutputAmended;

    /**
     * @param dataSourceConfig
     * @param message
     * @param clock
     * @param user
     */
    public DataSourceConfigurationAmendment(@Nonnull final IDataSourceConfiguration dataSourceConfig,
            @Nullable final Optional<String> message, @Nonnull final IClock clock, @Nullable final IUser user) {
        super(clock, DatabaseConstants.PROPS_JDBC);
        this.dataSourceConfig = Assert.checkNotNull(dataSourceConfig, "dataSourceConfig");
        this.message = message;
        this.user = user;
    }

    /**
     * A line is amendable if it's a comment line generated by this amendment (i.e.: it starts with '#>') or if it's a
     * jdbc property line.
     *
     * @param line
     *             the line to be tested
     * @return {@code true} if the line can be amended. {@code false} otherwise.
     */
    @Override
    public boolean isAmendable(@Nonnull final String line) {
        return isCommentBlockLine(line) || isAmendableProperty(line);
    }

    /**
     * Write the DataSource configuration as properties (if they have not yet been writen). If the line is an amendable
     * property then it is commented out.
     *
     * @param writer
     *               The writer on which to perform the amendment.
     * @param line
     *               The line to be amendment.
     * @throws IOException
     *                     If there are I/O problems trying to write to the writer.
     */
    @Override
    public void amend(@Nonnull final Writer writer, @Nonnull final String line) throws IOException {
        if (!isOutputAmended) {
            isOutputAmended = true;
            addPropertiesSection(writer);
        }

        if (isAmendableProperty(line)) {
            commentOut(line, writer);
        }
    }

    /**
     * Write the DataSource configuration if it has not been done already.
     *
     * @param writer
     *               The writer on which to serialize the DataSource configuration.
     * @throws IOException
     *                     If there are I/O problems trying to write to the writer.
     */
    @Override
    public void finalize(final @Nonnull Writer writer) throws IOException {
        if (!isOutputAmended) {
            addPropertiesSection(writer);
        }
    }

    private void addPropertiesSection(final @Nonnull Writer writer) throws IOException {
        writeCommentBlock(writer);
        writePropertyStrings(writer);
    }

    @SuppressWarnings("null")
    private void commentOut(final String line, final @Nonnull Writer writer) throws IOException {
        writeLine(writer, String.format("# %s", line));
    }

    private boolean isCommentBlockLine(final String line) {
        return line.trim().startsWith("#>");
    }

    private void writePropertyStrings(final Writer writer) throws IOException {
        final DataSourcePropertySerializer serializer = new DataSourcePropertySerializer(dataSourceConfig);
        serializer.writeTo(writer);
    }

    private void writeCommentBlock(final @Nonnull Writer writer) throws IOException {
        writeLine(writer, "#>*******************************************************");
        if (message.isPresent()) {
            writeLine(writer, "#> " + message.get());
        }

        writeLine(writer, formatUpdateTimestamp());
        writeLine(writer, "#>*******************************************************");
    }

    @SuppressWarnings("null")
    @Nonnull
    private String formatUpdateTimestamp() {
        final StringBuilder builder = new StringBuilder("#> Updated");
        if (user != null) {
            builder.append(" by ").append(user.getDisplayName());
        }
        builder.append(" on ").append(ISODateTimeFormat.dateTime().print(getClock().now()));

        return builder.toString();
    }
}
