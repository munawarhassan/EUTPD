import { Component, Input, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { BreadcrumbDefinition } from '.';
import { BreadcrumbService } from './breadcrumb.service';

@Component({
    selector: 'lt-breadcrumb',
    templateUrl: './breadcrumb.component.html',
    styleUrls: ['./breadcrumb.component.scss'],
})
export class BreadcrumbComponent implements OnInit {
    @Input()
    public enableTitle = true;
    /**
     * If true, breadcrumb is auto generated even without any mapping label
     * Default label is same as route segment
     */
    @Input()
    public autoGenerate = true;

    /**
     * custom class provided by consumer to increase specificity
     * This will benefit to override styles that are conflicting
     */
    @Input()
    public class = '';

    @Input()
    public iconCLass = 'svg-icon-1 svg-icon-primary';

    /**
     * By default query params will be preserved with breadcrumbs
     */
    @Input()
    public preserveQueryParams = true;

    /**
     * By default query fragments will be preserved with breadcrumbs
     */
    @Input()
    public preserveFragment = true;

    /**
     * anchorTarget = "_blank" makes the breadcrumb link open in a new tab
     */
    @Input()
    public anchorTarget: '_blank' | undefined;

    @Input()
    public separator: 'dot' | 'line' | 'separatorless' = 'dot';

    public setupMessage = 'not set up yet';
    public someParameterValue = null;

    public breadcrumbs$: Observable<BreadcrumbDefinition[]> | undefined;

    public title$: Observable<{ icon?: string; title: string } | undefined> | undefined;

    constructor(private breadcrumbService: BreadcrumbService, activateRoute: ActivatedRoute) {
        activateRoute.params.subscribe((params) => {
            this.setupComponent(params['someParam']);
        });
    }

    setupComponent(someParam) {
        this.setupMessage = 'set up at ' + new Date();
        this.someParameterValue = someParam;
    }

    ngOnInit() {
        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(
            map((breadcrumbs: BreadcrumbDefinition[]) => {
                return breadcrumbs
                    .filter((breadcrumb: BreadcrumbDefinition) => {
                        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
                        // this filters autogenerated labels in case of "[autoGenerate]: false"
                        if (this.autoGenerate) {
                            return true;
                        }
                        return !breadcrumb.isAutoGeneratedLabel;
                    })
                    .map((breadcrumb: BreadcrumbDefinition) => {
                        // Do not mutate breadcrumb as its source of truth.
                        // There can be scenarios where we can have multiple xng-breadcrumb instances in page
                        const { routeInterceptor, routeLink } = breadcrumb;
                        return {
                            ...breadcrumb,
                            routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,
                        };
                    });
            })
        );
        this.title$ = this.breadcrumbs$.pipe(
            map((ar) => {
                let title;
                const bc = ar[ar.length - 1];
                if (!bc) {
                    return undefined;
                }
                if (!bc.title) {
                    title = bc.label as string;
                } else {
                    const translate = this.breadcrumbService.translate(bc.title);
                    if (translate !== bc.title) {
                        title = translate;
                    } else {
                        title = bc.title;
                    }
                }
                return {
                    icon: bc.icon,
                    title,
                };
            })
        );
    }

    public useSVG(icon: string | undefined): boolean {
        return icon != null && icon.endsWith('.svg');
    }
}
